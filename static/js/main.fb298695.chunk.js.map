{"version":3,"sources":["components/DateInfo.js","components/AddTask.js","components/ListItem.js","App.js","serviceWorker.js","index.js"],"names":["DateInfo","props","state","days","months","today","year","month","date","day","todayDate","Date","this","getDate","dateObj","_day","getDay","_date","_year","getFullYear","_month","getMonth","setState","onChangeDate","newProps","newState","className","onClick","prevDate","setDate","bind","nextDate","Component","AddTask","onSubmit","e","preventDefault","onSubmitTodo","target","task_input","value","type","name","placeholder","autoComplete","autoFocus","ListItem","todo","item_id","id","memo","last_id","done","onChange","onCheckChanged","checked","htmlFor","text","pinned","others","document","getElementsByClassName","Array","from","forEach","el","nextSibling","childNodes","classList","remove","add","getElementById","toggle","_todo","Object","assign","onPin","onPinOut","focus","onMemoDelete","onDelete","memo_input","_memo","onMemoInput","App","todos","todoArr","JSON","parse","localStorage","getItem","itemArr","pinnedTodos","filter","lastPinId","length","map","cur","push","key","i","len","_arr","removeItem","setItem","stringify","splice","_id","tmp","unshift","contains","openTooltips","dateStr","_text","arr","Math","random","toString","substr","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fb298695.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './DateInfo.css';\r\n\r\nclass DateInfo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            days : ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\r\n            months : ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n            today : { year : null, month : null, date : null, day : null },\r\n            todayDate : new Date()\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getDate(this.state.todayDate);\r\n    }\r\n\r\n    getDate(dateObj) {\r\n        const _day = this.state.days[dateObj.getDay()];\r\n        const _date = dateObj.getDate();\r\n        const _year = dateObj.getFullYear();\r\n        const _month = this.state.months[dateObj.getMonth()];\r\n        this.setState({ \r\n            todayDate : dateObj,\r\n            today : {\r\n                day : _day,\r\n                date : _date,\r\n                year : _year,\r\n                month : _month\r\n            }\r\n        });\r\n        this.props.onChangeDate(`${_year}-${_month}-${_date}`);\r\n    }\r\n\r\n    shouldComponentUpdate(newProps, newState) {\r\n        return newState !== this.state;\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"date-div\">\r\n                <span className=\"date-prev\" onClick={function() {\r\n                    const prevDate = new Date(this.state.todayDate.setDate(this.state.todayDate.getDate() - 1));\r\n                    this.getDate(prevDate);\r\n                }.bind(this)}>&lt;</span>\r\n                <span className=\"date-datetext\">\r\n                    <div className=\"date-datetext-day\">{this.state.today.day}</div>\r\n                    <div className=\"date-datetext-monthyear\">{`${this.state.today.month} ${this.state.today.date}, ${this.state.today.year}`}</div>\r\n                </span>\r\n                <span className=\"date-next\" onClick={function() {\r\n                    const nextDate = new Date(this.state.todayDate.setDate(this.state.todayDate.getDate() + 1));\r\n                    this.getDate(nextDate);\r\n                }.bind(this)}>&gt;</span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DateInfo;","import React, {Component} from 'react';\r\nimport './AddTask.css';\r\n\r\nclass AddTask extends Component {\r\n    shouldComponentUpdate(newProps, newState) {\r\n        return newProps !== this.props;\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"task-div\">\r\n                <span className=\"task-icon\"></span>\r\n                <span className=\"task-form\">\r\n                    <form onSubmit={function(e) {\r\n                        e.preventDefault();\r\n                        this.props.onSubmitTodo(e.target.task_input.value);\r\n                        e.target.task_input.value = \"\";\r\n                    }.bind(this)}>\r\n                        <input type=\"text\" className=\"task-input\" name=\"task_input\" placeholder=\"Add a task...\" autoComplete=\"off\" autoFocus=\"on\"></input>\r\n                    </form>\r\n                </span>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddTask;\r\n","import React, {Component} from 'react';\r\nimport './ListItem.css';\r\n\r\nclass ListItem extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            todo : props.todo\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const item_id = this.state.todo.id;\r\n        return(\r\n            <div className={this.state.todo.memo ? `item-${item_id}` : (this.props.last_id === item_id ? `item-${item_id} pin-bottom` : `item-${item_id}`)}>\r\n                <div className=\"item-div\">\r\n                    {/*<input type=\"checkbox\" className=\"item-check\" id={`item-check-${item_id}`}></input>*/}\r\n                    {this.state.todo.done ? \r\n                    <input type=\"checkbox\" className=\"item-check\" id={`item-check-${item_id}`} onChange={function() {\r\n                        this.props.onCheckChanged(item_id);\r\n                    }.bind(this)} checked></input> : \r\n                    <input type=\"checkbox\" className=\"item-check\" id={`item-check-${item_id}`} onChange={function() {\r\n                        this.props.onCheckChanged(item_id);\r\n                    }.bind(this)}></input>}\r\n                    <label htmlFor={`item-check-${item_id}`} className=\"item-label\"></label>\r\n                    <div className=\"item-todo\">{this.state.todo.text}</div>\r\n                    <div className={this.state.todo.pinned ? \"item-pin\" : \"item-pin pin-icon-invisible\"} id={`item-pin-${item_id}`}></div>\r\n                    <div className=\"item-menu\" id={`item-menu-${item_id}`} onClick={function(e) {\r\n                        /* close every menu different from menu that i clicked this time(among open ones). */\r\n                        const others = document.getElementsByClassName('item-tooltip-open');\r\n                        if(others) {\r\n                            Array.from(others).forEach(el => {\r\n                                if(e.target.nextSibling.childNodes[0].id !== el.id) {\r\n                                    el.classList.remove('item-tooltip-open');\r\n                                    el.classList.add('item-tooltip-close');\r\n                                }\r\n                            });\r\n                        }\r\n                        document.getElementById(`item-tooltip-${item_id}`).classList.toggle('item-tooltip-open');\r\n                        document.getElementById(`item-tooltip-${item_id}`).classList.toggle('item-tooltip-close');\r\n                    }}></div>\r\n                    <div className=\"item-tooltip\">\r\n                        <ul className=\"item-tooltip-ul item-tooltip-close\" id={`item-tooltip-${item_id}`}>\r\n                            <li className={!this.state.todo.pinned ? 'item-tooltip-li' : 'item-tooltip-li pin-unable'}>\r\n                                <div className=\"item-pin-icon\"></div>\r\n                                <div className=\"item-pin-text\" onClick={function() {\r\n                                    document.getElementById(`item-pin-${item_id}`).classList.toggle('pin-icon-invisible');\r\n\r\n                                    const _todo = Object.assign({}, this.state.todo);\r\n                                    _todo.pinned = true;\r\n                                    this.setState({ todo : _todo });\r\n                                    this.props.onPin(item_id);\r\n                                    /*document.getElementById(`item-tooltip-${item_id}`).classList.toggle('item-tooltip-open');\r\n                                    document.getElementById(`item-tooltip-${item_id}`).classList.toggle('item-tooltip-close');*/\r\n                                }.bind(this)}>Pin on the top</div>\r\n                            </li>\r\n                            <li className={this.state.todo.pinned ? 'item-tooltip-li' : 'item-tooltip-li pin-unable'}>\r\n                                <div className=\"item-pin-out-icon\"></div>\r\n                                <div className=\"item-pin-out-text\" onClick={function() {\r\n                                    document.getElementById(`item-pin-${item_id}`).classList.toggle('pin-icon-invisible');\r\n\r\n                                    const _todo = Object.assign({}, this.state.todo);\r\n                                    _todo.pinned = false;\r\n                                    this.setState({ todo : _todo });\r\n                                    this.props.onPinOut(item_id);\r\n                                }.bind(this)}>Unpin</div>\r\n                            </li>\r\n                            <li className={!this.state.todo.memo ? 'item-tooltip-li' : 'item-tooltip-li memo-unable'}>\r\n                                <div className=\"item-memo-icon\"></div>\r\n                                <div className=\"item-memo-text\" onClick={function() {\r\n                                    document.getElementById(`item-memo-input-${item_id}`).classList.toggle('item-memo-input-open');\r\n                                    document.getElementById(`item-memo-input-${item_id}`).classList.toggle('item-memo-input-close');\r\n\r\n                                    /*document.getElementById(`item-tooltip-${item_id}`).classList.toggle('item-tooltip-open');\r\n                                    document.getElementById(`item-tooltip-${item_id}`).classList.toggle('item-tooltip-close');*/\r\n\r\n                                    document.getElementById(`item-memo-input-${item_id}`).focus();\r\n                                }}>Add a memo</div>\r\n                            </li>\r\n                            <li className={this.state.todo.memo ? 'item-tooltip-li' : 'item-tooltip-li memo-unable'} id={`item-memo-delete-${item_id}`}>\r\n                                <div className=\"item-memo-delete-icon\"></div>\r\n                                <div className=\"item-memo-delete-text\" onClick={function() {\r\n                                    const _todo = Object.assign({}, this.state.todo);\r\n\r\n                                    /*document.getElementById(`item-tooltip-${item_id}`).classList.toggle('item-tooltip-open');\r\n                                    document.getElementById(`item-tooltip-${item_id}`).classList.toggle('item-tooltip-close');*/\r\n\r\n                                    _todo.memo = \"\";\r\n                                    this.setState({ todo : _todo });\r\n                                    this.props.onMemoDelete(item_id);\r\n                                }.bind(this)}>Delete Memo</div>\r\n                            </li>\r\n                            <li className=\"item-tooltip-li\">\r\n                                <div className=\"item-delete-icon\"></div>\r\n                                <div className=\"item-delete-text\" onClick={function() {\r\n                                    this.props.onDelete(item_id);\r\n                                }.bind(this)}>Delete</div>\r\n                            </li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n                <form className=\"item-memo-form\" onSubmit={function(e) {\r\n                    e.preventDefault();\r\n                    if(e.target.memo_input.value) {\r\n                        const _memo = e.target.memo_input.value;\r\n                        const _todo = Object.assign({}, this.state.todo);\r\n                        _todo.memo = _memo;\r\n                        e.target.memo_input.value = \"\";\r\n                        this.setState({ todo : _todo });\r\n                        this.props.onMemoInput(_memo, item_id);\r\n                    }\r\n                    document.getElementById(`item-memo-input-${item_id}`).classList.toggle('item-memo-input-open');\r\n                    document.getElementById(`item-memo-input-${item_id}`).classList.toggle('item-memo-input-close');\r\n                }.bind(this)}>\r\n                    <input type=\"text\" name=\"memo_input\" className=\"item-memo-input item-memo-input-close\" id={`item-memo-input-${item_id}`} placeholder=\"Add a memo...\" autoComplete=\"off\"></input>\r\n\r\n                </form>\r\n                <div className={!this.state.todo.memo ? \"item-memo item-memo-close\" : (this.props.last_id === item_id ? \"item-memo item-memo-open pin-bottom-memo\" : \"item-memo item-memo-open\")} id={`item-memo-${item_id}`}>{this.state.todo.memo}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ListItem;\r\n","import React, {Component} from 'react';\nimport DateInfo from './components/DateInfo';\nimport AddTask from './components/AddTask';\nimport ListItem from './components/ListItem';\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            today : null,\n            todos : [] \n        }\n    }\n\n    componentDidMount() {\n        // get data from the local storage\n        const todoArr = JSON.parse(localStorage.getItem('todos'));\n        if(todoArr) this.setState({ todos : todoArr });\n    }\n\n    render() {\n        const itemArr = [];\n        const pinnedTodos = this.state.todos.filter(el => el.pinned);\n        \n        let lastPinId = -10;\n        if(pinnedTodos.length > 0) {\n            lastPinId = pinnedTodos[pinnedTodos.length - 1].id;\n        }\n        this.state.todos.map(cur => {\n            if(cur.date === this.state.today) {\n                itemArr.push(<ListItem key={cur.id} todo={cur} last_id={lastPinId} onCheckChanged={function(item_id) {\n                    let i = 0;\n                    const len = this.state.todos.length;\n                    \n                    for(i = 0; i < len; i++) {\n                        if(this.state.todos[i].id === item_id) {\n                            const _arr = Array.from(this.state.todos);\n                            _arr[i].done = !_arr[i].done;\n\n                            localStorage.removeItem('todos');\n                            localStorage.setItem('todos', JSON.stringify(_arr));\n\n                            this.setState({ todos : _arr });\n                            break;\n                        }\n                    }\n                    /*\n                    this.state.todos.forEach((el, idx) => {\n                        if(el.id === item_id) {\n                            const _arr = Array.from(this.state.todos);\n                            _arr[idx].done = !_arr[idx].done;\n\n                            localStorage.removeItem('todos');\n                            localStorage.setItem('todos', JSON.stringify(_arr));\n\n                            this.setState({ todos : _arr });\n                        }\n                    });*/\n                }.bind(this)}\n                onDelete={function(item_id) {\n                    let i = 0;\n                    const len = this.state.todos.length;\n                    \n                    for(i = 0; i < len; i++) {\n                        if(this.state.todos[i].id === item_id) {\n                            const _arr = Array.from(this.state.todos);\n                            _arr.splice(i, 1);\n\n                            localStorage.removeItem('todos');\n                            localStorage.setItem('todos', JSON.stringify(_arr));\n\n                            this.setState({ todos : _arr });\n                            break;\n                        }\n                    }\n                    /*\n                    this.state.todos.forEach((el, idx) => {\n                        if(el.id === item_id) {\n                            const _arr = Array.from(this.state.todos);\n                            _arr.splice(idx, 1);\n\n                            localStorage.removeItem('todos');\n                            localStorage.setItem('todos', JSON.stringify(_arr));\n\n                            this.setState({ todos : _arr });\n                        }\n                    });*/\n                }.bind(this)}\n                onMemoInput={function(_memo, _id) {\n                    let i = 0;\n                    const len = this.state.todos.length;\n                    \n                    for(i = 0; i < len; i++) {\n                        if(this.state.todos[i].id === _id) {\n                            const _arr = Array.from(this.state.todos);\n                            _arr[i].memo = _memo;\n\n                            localStorage.removeItem('todos');\n                            localStorage.setItem('todos', JSON.stringify(_arr));\n\n                            this.setState({ todos : _arr });\n                            break;\n                        }\n                    }\n                    /*\n                    this.state.todos.forEach((el, idx) => {\n                        if(_id === el.id) {\n                            const _arr = Array.from(this.state.todos);\n                            _arr[idx].memo = _memo;\n\n                            localStorage.removeItem('todos');\n                            localStorage.setItem('todos', JSON.stringify(_arr));\n\n                            this.setState({ todos : _arr });\n                        }\n                    });*/\n                }.bind(this)}\n                onMemoDelete={function(_id) {\n                    let i = 0;\n                    const len = this.state.todos.length;\n                    \n                    for(i = 0; i < len; i++) {\n                        if(this.state.todos[i].id === _id) {\n                            const _arr = Array.from(this.state.todos);\n                            _arr[i].memo = \"\";\n\n                            localStorage.removeItem('todos');\n                            localStorage.setItem('todos', JSON.stringify(_arr));\n\n                            this.setState({ todos : _arr });\n                            break;\n                        }\n                    }\n                    /*\n                    this.state.todos.forEach((el, idx) => {\n                        if(el.id === _id) {\n                            const _arr = Array.from(this.state.todos);\n                            _arr[idx].memo = \"\";\n\n                            localStorage.removeItem('todos');\n                            localStorage.setItem('todos', JSON.stringify(_arr));\n\n                            this.setState({ todos : _arr });\n                        }\n                    });*/\n                }.bind(this)}\n                onPin={function(_id) {\n                    let i = 0;\n                    const len = this.state.todos.length;\n                    \n                    for(i = 0; i < len; i++) {\n                        if(this.state.todos[i].id === _id) {\n                            const _arr = Array.from(this.state.todos);\n                            const tmp = _arr[i];\n                            _arr.splice(i, 1);\n                            tmp.pinned = true;\n                            _arr.unshift(tmp);\n\n                            localStorage.removeItem('todos');\n                            localStorage.setItem('todos', JSON.stringify(_arr));\n\n                            this.setState({ todos : _arr });\n                            break;\n                        }\n                    }\n                    /*\n                    this.state.todos.forEach((el, idx) => {\n                        if(el.id === _id) {\n                            const _arr = Array.from(this.state.todos);\n                            _arr.splice(idx, 1);\n                            el.pinned = true;\n                            _arr.unshift(el);\n\n                            localStorage.removeItem('todos');\n                            localStorage.setItem('todos', JSON.stringify(_arr));\n\n                            this.setState({ todos : _arr });\n                        }\n                    });*/\n                }.bind(this)}\n                onPinOut={function(_id) {\n                    let i = 0;\n                    const len = this.state.todos.length;\n                    \n                    for(i = 0; i < len; i++) {\n                        if(this.state.todos[i].id === _id) {\n                            const _arr = Array.from(this.state.todos);\n                            const tmp = _arr[i];\n                            _arr.splice(i, 1);\n                            tmp.pinned = false;\n                            _arr.push(tmp);\n                            \n                            localStorage.removeItem('todos');\n                            localStorage.setItem('todos', JSON.stringify(_arr));\n\n                            this.setState({ todos : _arr });\n                            break;\n                        }\n                    }\n                    /*\n                    this.state.todos.forEach((el, idx) => {\n                        if(el.id === _id) {\n                            const _arr = Array.from(this.state.todos);\n                            _arr.splice(idx, 1);\n                            el.pinned = false;\n                            _arr.push(el);\n                            \n                            localStorage.removeItem('todos');\n                            localStorage.setItem('todos', JSON.stringify(_arr));\n\n                            this.setState({ todos : _arr });\n                        }\n                    });*/\n                }.bind(this)}></ListItem>);\n            }\n        });\n\n        return (\n            <div className=\"App\" onClick={function(e) {\n                if(!e.target.classList.contains('item-menu')) {\n                    const openTooltips = document.getElementsByClassName('item-tooltip-open');\n                    if(openTooltips) {\n                        Array.from(openTooltips).forEach(el => {      \n                            el.classList.toggle('item-tooltip-open');\n                            el.classList.toggle('item-tooltip-close');\n                        });\n                    }\n                }\n            }}>\n                <div className=\"background\"></div>\n                <div className=\"frame\">\n                    <div className=\"title-div\">\n                        <span>Daily-Todos</span>\n                    </div>\n                    <DateInfo onChangeDate={function(dateStr) {\n                        this.setState({ today : dateStr });\n                    }.bind(this)}></DateInfo>\n                    <AddTask onSubmitTodo={function(_text) {\n                        if(!_text) {\n                            return;\n                        } else {\n                            let arr = Array.from(this.state.todos);\n                            arr.push({\n                                id : Math.random().toString(36).substr(2, 9),\n                                /*this.state.todos.length > 0 ? this.state.todos[this.state.todos.length - 1].id + 1 : 0,*/\n                                text : _text,\n                                memo : \"\",\n                                pinned : false,\n                                done : false,\n                                date : this.state.today\n                            });\n                            // save data in the local storage\n                            localStorage.setItem('todos', JSON.stringify(arr));\n                            this.setState({ todos : arr });\n                        }\n                    }.bind(this)}></AddTask>\n                    <div className=\"list-div\">\n                        {itemArr}\n                        <div className=\"blank\"></div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}